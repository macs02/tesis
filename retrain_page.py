import streamlit as st
import pandas as pd
from retrain import (
    ensure_directories, validate_new_data, load_original_data,
    combine_and_save_data, backup_current_model, train_new_model, 
    restore_model, get_available_backups, display_metrics,
    delete_model_backup, format_backup_name
)
from config import ALL_REQUIRED_COLUMNS, FEATURE_COLUMNS, TARGET_COLUMN, CLASS_NAMES

def show_data_requirements():
    """Muestra los requisitos de datos para el reentrenamiento"""
    with st.expander("üìã Requisitos de Datos para Reentrenamiento"):
        st.markdown("### Estructura Requerida del Archivo")

        st.info("""
        Su archivo Excel debe contener **exactamente** estas 10 columnas:
        """)

        # Crear tabla con informaci√≥n de columnas
        col_info = pd.DataFrame({
            'üè∑Ô∏è Nombre de Columna': ALL_REQUIRED_COLUMNS,
            'üìù Descripci√≥n': [
                'N√∫mero de grupo experimental',
                'Glucemia en el d√≠a 14',
                'Glucemia en el d√≠a 20',
                'Nivel de creatinina',
                'Nivel de colesterol',
                'Nivel de triglic√©ridos',
                'Lipoprote√≠nas VLDL',
                'Nivel de insulina',
                'Hemoglobina glicosilada',
                'Clasificaci√≥n fetal (1=PEG, 2=AEG, 3=GEG)'
            ],
            'üéØ Tipo': ['Num√©rico'] * 9 + ['Categ√≥rico (1, 2, 3)']
        })

        st.dataframe(col_info, use_container_width=True, hide_index=True)

        # Advertencias importantes
        st.warning("""
        **‚ö†Ô∏è IMPORTANTE:**
        ‚Ä¢ La columna 'Clasif fetos' debe contener √∫nicamente valores 1, 2, o 3
        ‚Ä¢ Todas las dem√°s columnas deben contener valores num√©ricos
        ‚Ä¢ No debe haber celdas vac√≠as en ninguna columna
        ‚Ä¢ Los nombres de las columnas deben coincidir exactamente
        ‚Ä¢ La primera fila debe contener los nombres de las columnas (se eliminar√° autom√°ticamente)
        """)

def render_upload_section():
    """Renderiza la secci√≥n de carga de archivos"""
    st.subheader("üìÇ Cargar Nuevos Datos")

    uploaded_file = st.file_uploader(
        "Seleccione el archivo Excel con los nuevos datos",
        type=['xlsx'],
        help="Solo se aceptan archivos Excel (.xlsx)"
    )

    if uploaded_file is not None:
        try:
            # Cargar datos
            new_data = pd.read_excel(uploaded_file)

            # Mostrar vista previa
            st.success("‚úÖ Archivo cargado correctamente")
            st.subheader("üëÄ Vista Previa de los Datos")
            st.dataframe(new_data.head(10), use_container_width=True)

            # Mostrar estad√≠sticas b√°sicas
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Total de Filas", len(new_data))
            with col2:
                st.metric("Total de Columnas", len(new_data.columns))
            with col3:
                if TARGET_COLUMN in new_data.columns:
                    unique_classes = new_data[TARGET_COLUMN].nunique()
                    st.metric("Clases √önicas", unique_classes)

            # Validar datos
            is_valid, message = validate_new_data(new_data)

            if is_valid:
                st.success(f"‚úÖ {message}")

                # Mostrar distribuci√≥n de clases
                if TARGET_COLUMN in new_data.columns:
                    st.subheader("üìä Distribuci√≥n de Clases en Nuevos Datos")
                    class_counts = new_data[TARGET_COLUMN].value_counts().sort_index()
                    class_display_names = {1: 'PEG', 2: 'AEG', 3: 'GEG'}

                    dist_data = pd.DataFrame({
                        'Clase': [class_display_names.get(i, f'Clase {i}') for i in class_counts.index],
                        'Cantidad': class_counts.values
                    })

                    st.bar_chart(dist_data.set_index('Clase'))

                return new_data
            else:
                st.error(f"‚ùå {message}")
                return None

        except Exception as e:
            st.error(f"Error al procesar el archivo: {str(e)}")
            return None

    return None

def render_training_section(new_data):
    """Renderiza la secci√≥n de entrenamiento"""
    st.subheader("üöÄ Entrenamiento del Modelo")

    # Cargar datos originales
    original_data = load_original_data()

    if original_data is None:
        st.error("‚ùå No se pudo cargar la base de datos original. Verifique que el archivo existe.")
        return

    # Mostrar informaci√≥n de combinaci√≥n
    col1, col2, col3 = st.columns(3)
    with col1:
        st.info(f"**Datos Originales**\n{len(original_data)} registros")
    with col2:
        st.info(f"**Nuevos Datos**\n{len(new_data)} registros")
    with col3:
        estimated_new = len(new_data) - 1  # Menos la fila de encabezados
        st.info(f"**Estimado a Agregar**\n~{estimated_new} registros")

    # Advertencia importante sobre permanencia
    st.warning("""
    ‚ö†Ô∏è **IMPORTANTE**: Los nuevos datos se agregar√°n **PERMANENTEMENTE** al archivo original. 
    Se crear√° un backup autom√°tico antes de proceder.
    """)

    # Bot√≥n de entrenamiento
    if st.button("üîÑ Entrenar Nuevo Modelo", type="primary"):
        with st.spinner("üîÑ Procesando datos y entrenando modelo... Esto puede tomar varios minutos."):

            try:
                # Crear backup del modelo actual
                backup_name = backup_current_model()
                st.info(f"‚úÖ Backup del modelo creado: {backup_name}")

                # Combinar y guardar datos (PERMANENTE)
                combined_data, new_rows_added = combine_and_save_data(original_data, new_data)
                st.success(f"‚úÖ Se agregaron {new_rows_added} nuevos registros al archivo original")
                st.info(f"üìä Total de registros ahora: {len(combined_data)}")

                # Entrenar nuevo modelo
                success, message, metrics = train_new_model(combined_data)

                if success:
                    st.success(f"üéâ {message}")
                    st.balloons()

                    # Mostrar m√©tricas
                    st.subheader("üìà M√©tricas del Nuevo Modelo")
                    display_metrics(metrics)

                    # Guardar informaci√≥n del entrenamiento en sesi√≥n
                    st.session_state['last_training'] = {
                        'backup_name': backup_name,
                        'metrics': metrics,
                        'timestamp': backup_name.split('_')[-2] + '_' + backup_name.split('_')[-1],
                        'new_rows_added': new_rows_added
                    }

                    # Marcar que el modelo fue actualizado
                    st.session_state['model_updated'] = True

                    st.success("‚úÖ El nuevo modelo est√° listo para usar en la aplicaci√≥n principal.")

                    # Limpiar cache de modelos para forzar recarga
                    st.cache_resource.clear()

                else:
                    st.error(f"‚ùå {message}")

            except Exception as e:
                st.error(f"‚ùå Error durante el proceso: {str(e)}")

def render_model_management():
    """Renderiza la secci√≥n de gesti√≥n de modelos"""
    st.subheader("üîß Gesti√≥n de Modelos")

    # Obtener backups disponibles
    backups = get_available_backups()

    if not backups:
        st.info("No hay backups de modelos disponibles.")
        return

    # Mostrar √∫ltimo entrenamiento si est√° disponible
    if 'last_training' in st.session_state:
        last_training = st.session_state['last_training']
        with st.expander("üìä Informaci√≥n del √öltimo Entrenamiento", expanded=True):
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Fecha/Hora", last_training['timestamp'].replace('_', ' - '))
            with col2:
                st.metric("Nuevos Registros", last_training['new_rows_added'])
            with col3:
                if 'metrics' in last_training:
                    accuracy = last_training['metrics'].get('accuracy', 0)
                    st.metric("Precisi√≥n", f"{accuracy:.4f}")

    st.write(f"**Modelos disponibles para restaurar:** {len(backups)}")

    # Selector de backup para restaurar
    selected_backup = st.selectbox(
        "Seleccionar modelo para restaurar:",
        backups,
        format_func=format_backup_name,
        help="Seleccione un modelo anterior para restaurar"
    )

    # Botones de acci√≥n organizados en columnas
    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("üîÑ Restaurar Modelo", type="secondary", use_container_width=True):
            if st.session_state.get('confirm_restore', False):
                with st.spinner("Restaurando modelo..."):
                    success, message = restore_model(selected_backup)

                    if success:
                        st.success(f"‚úÖ {message}")
                        # Limpiar cache para forzar recarga del modelo
                        st.cache_resource.clear()
                        # Limpiar confirmaci√≥n
                        st.session_state['confirm_restore'] = False
                        # Marcar que el modelo fue actualizado
                        st.session_state['model_updated'] = True
                        st.rerun()
                    else:
                        st.error(f"‚ùå {message}")
                        st.session_state['confirm_restore'] = False
            else:
                st.session_state['confirm_restore'] = True
                st.warning("‚ö†Ô∏è ¬øConfirma restaurar este modelo? Haga clic nuevamente para confirmar.")

    with col2:
        if st.button("üóëÔ∏è Eliminar Backup", type="secondary", use_container_width=True):
            if st.session_state.get('confirm_delete', False):
                with st.spinner("Eliminando backup..."):
                    success, message = delete_model_backup(selected_backup)

                    if success:
                        st.success(f"‚úÖ {message}")
                        st.session_state['confirm_delete'] = False
                        st.rerun()
                    else:
                        st.error(f"‚ùå {message}")
                        st.session_state['confirm_delete'] = False
            else:
                st.session_state['confirm_delete'] = True
                st.warning("‚ö†Ô∏è ¬øConfirma eliminar este backup? Haga clic nuevamente para confirmar.")

    with col3:
        if st.button("üîÑ Limpiar Cache", type="secondary", use_container_width=True):
            # Limpiar cache de Streamlit para forzar recarga de modelos
            st.cache_resource.clear()
            st.success("‚úÖ Cache limpiado. Los modelos se recargar√°n autom√°ticamente.")

    # Limpiar confirmaciones si se cambia la selecci√≥n
    if 'last_selected_backup' not in st.session_state:
        st.session_state['last_selected_backup'] = selected_backup
    elif st.session_state['last_selected_backup'] != selected_backup:
        st.session_state['confirm_restore'] = False
        st.session_state['confirm_delete'] = False
        st.session_state['last_selected_backup'] = selected_backup

def render_data_info():
    """Renderiza informaci√≥n sobre el estado actual de los datos"""
    st.subheader("üìä Estado Actual de los Datos")

    original_data = load_original_data()

    if original_data is not None:
        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric("Total de Registros", len(original_data))

        with col2:
            if TARGET_COLUMN in original_data.columns:
                unique_classes = original_data[TARGET_COLUMN].nunique()
                st.metric("Clases √önicas", unique_classes)

        with col3:
            st.metric("Columnas", len(original_data.columns))

    else:
        st.error("‚ùå No se pudo cargar la informaci√≥n de los datos originales")

def render_retrain_page():
    """Funci√≥n principal para renderizar la p√°gina de reentrenamiento"""
    # Configurar p√°gina
    st.title("üîÑ Reentrenamiento de Modelo")
    st.markdown("---")

    # Asegurar que existan los directorios necesarios
    ensure_directories()

    # Informaci√≥n introductoria
    st.markdown("""
    ### üéØ Funcionalidad de Reentrenamiento

    Esta p√°gina permite **reentrenar** el modelo de clasificaci√≥n del peso fetal con nuevos datos.
    El proceso incluye:

    1. **Carga de nuevos datos** en formato Excel
    2. **Validaci√≥n autom√°tica** de la estructura de datos  
    3. **Combinaci√≥n PERMANENTE** con la base de datos original
    4. **Entrenamiento** del modelo con optimizaci√≥n de hiperpar√°metros
    5. **Backup autom√°tico** del modelo anterior
    6. **Gesti√≥n intuitiva** para restaurar o eliminar modelos previos
    """)

    # Mostrar estado actual de los datos
    render_data_info()

    st.markdown("---")

    # Mostrar requisitos de datos
    show_data_requirements()

    st.markdown("---")

    # Secci√≥n de carga de archivos
    new_data = render_upload_section()

    if new_data is not None:
        st.markdown("---")
        # Secci√≥n de entrenamiento
        render_training_section(new_data)

    st.markdown("---")

    # Secci√≥n de gesti√≥n de modelos
    render_model_management()

    # Informaci√≥n adicional
    with st.expander("‚ÑπÔ∏è Informaci√≥n Adicional"):
        st.markdown("""
        ### üìä Proceso de Entrenamiento

        - **Divisi√≥n de datos**: 70% entrenamiento, 30% prueba
        - **Validaci√≥n cruzada**: 5-fold cross-validation
        - **Optimizaci√≥n**: Grid search para hiperpar√°metros
        - **M√©tricas**: Precisi√≥n, Recall, F1-Score, Especificidad

        ### üîí Seguridad y Gesti√≥n

        - Se crea un backup autom√°tico antes de cada entrenamiento
        - **Los datos se guardan PERMANENTEMENTE** en el archivo original
        - Posibilidad de restaurar cualquier modelo anterior de forma intuitiva
        - Opci√≥n de eliminar backups innecesarios para ahorrar espacio
        - Validaci√≥n exhaustiva de datos antes del entrenamiento

        ### ‚ö†Ô∏è Consideraciones Importantes

        - **PERMANENCIA**: Los nuevos datos se agregan al archivo original y no se pueden deshacer
        - El proceso puede tomar varios minutos dependiendo del tama√±o de los datos
        - Se eliminan autom√°ticamente filas de encabezados duplicadas
        - Se eliminan registros completamente duplicados (mantiene uno)
        - Aseg√∫rese de que los nuevos datos sean de alta calidad
        - Mantenga copias de seguridad de sus datos importantes

        ### üîÑ Gesti√≥n de Modelos

        - **Restaurar**: Vuelve a un modelo anterior (requiere confirmaci√≥n)
        - **Eliminar**: Borra backups innecesarios (requiere confirmaci√≥n)  
        - **Cache**: Limpia la memoria para forzar recarga de modelos
        - Los cambios son efectivos inmediatamente en la aplicaci√≥n principal
        """)

if __name__ == "__main__":
    render_retrain_page()